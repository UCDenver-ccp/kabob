(ns edu.ucdenver.ccp.test.kabob.build.hanalyzer-rules-test
  (:use clojure.test))
;; (use 'edu.ucdenver.ccp.kabob.build.build)
;; (use 'edu.ucdenver.ccp.kr.kb)
;; (use 'edu.ucdenver.ccp.kr.rdf)
;; (use 'edu.ucdenver.ccp.kr.sparql)
;; (use 'edu.ucdenver.ccp.kr.repl-utils)
;; (import 'java.io.File
;;         'java.util.UUID
;;         'edu.ucdenver.ccp.common.file.FileUtil
;;         'edu.ucdenver.ccp.common.file.FileWriterUtil
;;         'edu.ucdenver.ccp.common.file.CharacterEncoding
;;         'edu.ucdenver.ccp.common.collections.CollectionsUtil
;;         'edu.ucdenver.ccp.rdfizer.rdf.RDFGenerator
;; )

;; creates (if necessary) and returns a unique directory
;;   in the default temporary-file directory
#_(defn get-temporary-folder []
  (let [folder (File. (.getParentFile (File/createTempFile "tmpfile" ""))
                      (.toString (UUID/randomUUID)))]
    (FileUtil/mkdir folder) 
    folder)) 

;; creates (if necessary) and returns a directory called "rdf"
;;    in the specified base directory
#_(defn get-rdf-directory [base-dir]
  (let [dir (File. base-dir "rdf")]
    (FileUtil/mkdir dir)
  dir))

;; creates (if necessary) and returns a directory called "output"
;;    in the specified base directory
#_(defn get-output-directory [base-dir]
  (let [dir (File. base-dir "output")]
    (FileUtil/mkdir dir)
  dir))


;; creates a file containing RDF needed to run the DIP-related hanalyzer rules.
;; This file contains mainly things that would otherwise be generated by
;;   the de-ice, ice-ify, id-mapping, etc. scripts.
#_(defn create-dip-supporting-rdf [rdfdir]
  (let [triples '(())]
    (binding [*output-dir* (.getAbsolutePath rdfdir)]
      (serialize-triples triples "dip-supporting-triples"))
    ))

;; creates a file containing RDF for the sample DIP record(s) input below. 
;; The raw file is created and is used for the basis of RDF generation.
#_(defn create-dip-rdf [rdfdir]
  (let [dip-records (CollectionsUtil/createList "ID interactor A\tID interactor B\tAlt. ID interactor A\tAlt. ID interactor B\tAlias(es) interactor A\tAlias(es) interactor B\tInteraction detection method(s)\tPublication 1st author(s)\tPublication Identifier(s)\tTaxid interactor A\tTaxid interactor B\tInteraction type(s)\tSource database(s)\tInteraction identifier(s)\tConfidence value(s)\tProcessing Status"
                                                "DIP-257N|refseq:NP_001420|uniprotkb:Q09472\tDIP-368N|uniprotkb:P04637\t-\t-\t-\t-\tMI:0071(molecular sieving)|MI:0826(x ray scattering)|MI:0077(nuclear magnetic resonance)|MI:0017(classical fluorescence spectroscopy)|MI:0077(nuclear magnetic resonance)|MI:0019(coimmunoprecipitation)|MI:0065(isothermal titration calorimetry)\t-\tpmid:11070080|pmid:18391200|pmid:19217391|pmid:19217391|pmid:19217391|pmid:9194565|pmid:19217391\ttaxid:9606\ttaxid:9606\tMI:0218(physical interaction)|MI:0407(direct interaction)|MI:0407(direct interaction)|MI:0407(direct interaction)|MI:0407(direct interaction)|MI:0218(physical interaction)|MI:0407(direct interaction)\tMI:0465(dip)\tDIP-6E\tdip-quality-status:core\tdip:0002(small scale)|dip:0002(small scale)|dip:0004(small scale)|dip:0004(small scale)|dip:0004(small scale)|dip:0002(small scale)|dip:0004(small scale)\tdip:0039(experimental-processed)|dip:0039(experimental-processed)|dip:0039(experimental-processed)|dip:0039(experimental-processed)|dip:0039(experimental-processed)|dip:0039(experimental-processed)|dip:0039(experimental-processed)")
        raw-dip-file (File. (.getParentFile rdfdir) "dip.utf8")]
    (FileWriterUtil/printLines dip-records raw-dip-file
                               CharacterEncoding/UTF_8)  
    (RDFGenerator/generateDipRDF raw-dip-file rdfdir
                                 System/currentTimeMillis nil false -1)))

;; creates a bigdata properties file and loads RDF in the specified rdfdir
;;   into a new bigdata journal
#_(defn load-rdf-into-test-bigdata-kb [rootdir rdfdir]
  )

;; defines a connection to a kb to use during the tests
#_(defn connect-to-test-bigdata-kb
  "Connects to a local bigdata kb using specified root directory"
  [rootdir]
  (edu.ucdenver.ccp.kabob.build.kb-connection/builder-kb
   {:properties (str rootdir File/separator "RWStore.properties")
    :journal (str rootdir File/separator "kabob.RW.jnl")
    :store-name "kabob"}))

;; run the hanalyzer rule set over the test kb,
;;    outputting generated RDF to a file in the specified directory
#_(defn run-hanalyzer-rules-on-test-kb [outputdir]
  (binding [*output-dir* outputdir]
    (serialize-rule-output
     *kb*
     edu.ucdenver.ccp.kabob.build.hanalyzer-rules/*hanalyzer-edge-construct-rules*)))

;; asserts that the input file is non-empty by looking at the size of the file
#_(defn check-for-non-empty-file [dir filename]
  (is (not (= 0 (.length (File. dir filename))))))

;; tests the generation of DIP hanalyzer edges
#_(deftest test-dip-hanalyzer-rule-generation
  (let [folder (get-temporary-folder)
        rdfdir (get-rdf-directory folder)
        outputdir (get-output-directory folder)]
    (try ((create-dip-supporting-rdf rdfdir)
           (create-dip-rdf rdfdir)
           (load-rdf-into-test-bigdata-kb folder rdfdir)
           (def test-kb (connect-to-test-bigdata-kb))
           (set!-kb test-kb)
           (run-hanalyzer-rules-on-test-kb outputdir)
           (check-for-non-empty-file outputdir "hanalyzer-edges-dip.nt"))
      (finally (FileUtil/deleteDirectory folder)))))